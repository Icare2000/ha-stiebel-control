esphome:
  name: heatingpump
  friendly_name: Heating Pump CAN Interface
  platform: ESP32
  board: esp32dev
  includes:
  - stiebeltools/ElsterTable.h
  - stiebeltools/KElsterTable.h
  - stiebeltools/KElsterTable.cpp
  - stiebeltools/NUtils.h
  - stiebeltools/NUtils.cpp
  - stiebeltools/NTypes.h
  - stiebeltools/heatingpump.h
api:
  encryption:
    key: 1cSivcBYHZBouiCgueZtgbwR0cBoKPVc48JNhvXK6JI=
logger:
  level: INFO
ota:
  password: f0e6110663e3bef67846f076d7e4db81
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.0.194
    gateway: 192.168.0.1
    dns1: 192.168.0.2
    subnet: 255.255.255.0
  use_address: heatingpump.local
  ap:
    ssid: Heatingpump Fallback Hotspot
    password: AsBl9n46jlOx
captive_portal: null
select:
- platform: template
  name: PROGRAMMSCHALTER_SET
  id: PROGRAMMSCHALTER_SET
  options:
  - Notbetrieb
  - Bereitschaft
  - Automatik
  - Tagbetrieb
  - Absenkbetrieb
  - Warmwasser
  - Unbekannt
  initial_option: Unbekannt
  optimistic: true
  on_value:
    then:
    - lambda: |-
        // Prüfe ob Dropdown nicht auf Unbekannt steht
        const char* auswahl = id(PROGRAMMSCHALTER_SET).state.c_str();
        if(strcmp(auswahl, "Unbekannt") != 0) {
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("PROGRAMMSCHALTER"), auswahl);
          readSignal(&CanMembers[cm_manager], GetElsterIndex("PROGRAMMSCHALTER"));
        }
        return;
sensor:
- platform: template
  name: OUTDOOR_TEMP
  id: AUSSENTEMP
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_kessel], GetElsterIndex("AUSSENTEMP"));
    return {};
- platform: template
  name: ADJUST_STORAGE_TARGET_TEMP
  id: EINSTELL_SPEICHERSOLLTEMP
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_kessel], GetElsterIndex("EINSTELL_SPEICHERSOLLTEMP"));
    return {};
- platform: template
  name: ADJUST_STORAGE_TARGET_TEMP2
  id: EINSTELL_SPEICHERSOLLTEMP2
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_kessel], GetElsterIndex("EINSTELL_SPEICHERSOLLTEMP2"));
    return {};
- platform: template
  name: AUXILIARY_BOILER_TARGET
  id: HILFSKESSELSOLL
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_kessel], GetElsterIndex("HILFSKESSELSOLL"));
    return {};
- platform: template
  name: BOILER_INITIALIZATION
  id: INITIALISIERUNG_KESSEL
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: BOILER_TARGET_TEMP
  id: KESSELSOLLTEMP
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_kessel], GetElsterIndex("KESSELSOLLTEMP"));
    return {};
- platform: template
  name: BOILER_RETURN_ACTUAL_TEMP
  id: RUECKLAUFISTTEMP_KESSEL
  unit_of_measurement: °C
  icon: mdi:waves-arrow-left
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_kessel], GetElsterIndex("RUECKLAUFISTTEMP"));
    return {};
- platform: template
  name: STORAGE_ACTUAL_TEMP
  id: SPEICHERISTTEMP
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  filters:
  - offset: 3.9
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_kessel], GetElsterIndex("SPEICHERISTTEMP"));
    return {};
- platform: template
  name: STORAGE_TARGET_TEMP
  id: SPEICHERSOLLTEMP
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_kessel], GetElsterIndex("SPEICHERSOLLTEMP"));
    return {};
- platform: template
  name: FLOW_TARGET_TEMP
  id: VORLAUFSOLLTEMP
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_kessel], GetElsterIndex("VORLAUFSOLLTEMP"));
    return {};
- platform: template
  name: HP_FLOW_ACTUAL_BOILER
  id: WPVORLAUFIST_KESSEL
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_kessel], GetElsterIndex("WPVORLAUFIST"));
    return {};
- platform: template
  name: BUS_CONTROL
  id: BUSKONTROLLE
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: STARTUP_END
  id: ANFAHRENT
  state_class: measurement
  accuracy_decimals: 0
- platform: template
  name: DEVICE_CONFIGURATION
  id: GERAETEKONFIGURATION
  icon: mdi:description
  state_class: measurement
  accuracy_decimals: 0
- platform: template
  name: HARDWARE_NUMBER_MANAGER
  id: HARDWARE_NUMMER_MANAGER
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: INDEX_NOT_FOUND_MANAGER
  id: INDEX_NOT_FOUND_MANAGER
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: INITIALIZATION_MANAGER
  id: INITIALISIERUNG_MANAGER
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: COMPRESSOR_RUNTIME_WHEN_STORAGE_DEMAND
  id: LAUFZEIT_VERD_BEI_SPEICHERBEDARF
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("LAUFZEIT_VERD_BEI_SPEICHERBEDARF"));
    return {};
- platform: template
  name: VENTILATION_PASSIVE_COOLING_VIA_EXHAUST_FAN
  id: LUEFT_PASSIVKUEHLUNG_UEBER_FORTLUEFTER
  state_class: measurement
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("LUEFT_PASSIVKUEHLUNG_UEBER_FORTLUEFTER"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_1_2_HEATING_MODE_MANAGER
  id: LZ_VERD_1_2_HEIZBETRIEB_MANAGER
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_1_2_HEIZBETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_1_2_COOLING_MODE_MANAGER
  id: LZ_VERD_1_2_KUEHLBETRIEB_MANAGER
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_1_2_KUEHLBETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_1_2_DHW_MODE_MANAGER
  id: LZ_VERD_1_2_WW_BETRIEB_MANAGER
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_1_2_WW_BETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_1_HEATING_MODE_MANAGER
  id: LZ_VERD_1_HEIZBETRIEB_MANAGER
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_1_HEIZBETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_1_COOLING_MODE_MANAGER
  id: LZ_VERD_1_KUEHLBETRIEB_MANAGER
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_1_KUEHLBETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_1_DHW_MODE_MANAGER
  id: LZ_VERD_1_WW_BETRIEB_MANAGER
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_1_WW_BETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_2_HEATING_MODE_MANAGER
  id: LZ_VERD_2_HEIZBETRIEB_MANAGER
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_2_HEIZBETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_2_COOLING_MODE_MANAGER
  id: LZ_VERD_2_KUEHLBETRIEB_MANAGER
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_2_KUEHLBETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_2_DHW_MODE_MANAGER
  id: LZ_VERD_2_WW_BETRIEB_MANAGER
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("LZ_VERD_2_WW_BETRIEB"));
    return {};
- platform: template
  name: PARAMETER_SET_MANAGER
  id: PARAMETERSATZ_MANAGER
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: SOURCE_PUMPS_STATUS
  id: QUELLENPUMPEN_STATUS
  unit_of_measurement: °C
  state_class: measurement
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("PARAMETERSATZ"));
    return {};
- platform: template
  name: ROOM_ACTUAL_TEMP
  id: RAUMISTTEMP
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("RAUMISTTEMP"));
    return {};
- platform: template
  name: ROOM_TARGET_TEMP_I
  id: RAUMSOLLTEMP_I
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("RAUMSOLLTEMP_I"));
    return {};
- platform: template
  name: ROOM_TARGET_TEMP_II
  id: RAUMSOLLTEMP_II
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("RAUMSOLLTEMP_II"));
    return {};
- platform: template
  name: ROOM_TARGET_TEMP_III
  id: RAUMSOLLTEMP_III
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("RAUMSOLLTEMP_III"));
    return {};
- platform: template
  name: ROOM_TARGET_TEMP_NIGHT
  id: RAUMSOLLTEMP_NACHT
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("RAUMSOLLTEMP_NACHT"));
    return {};
- platform: template
  name: RETURN_ACTUAL_TEMP_MANAGER
  id: RUECKLAUFISTTEMP_MANAGER
  unit_of_measurement: °C
  icon: mdi:waves-arrow-left
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("RUECKLAUFISTTEMP"));
    return {};
- platform: template
  name: COLLECTIVE_RELAY_STATUS
  id: SAMMEL_RELAISSTATUS
  icon: mdi:switch
  accuracy_decimals: 0
- platform: template
  name: SOFTWARE_NUMBER_MANAGER
  id: SOFTWARE_NUMMER_MANAGER
  icon: mdi:wysiwyg
  accuracy_decimals: 0
- platform: template
  name: SOFTWARE_VERSION
  id: SOFTWARE_VERSION
  icon: mdi:wysiwyg
  accuracy_decimals: 0
- platform: template
  name: STORAGE_DEMAND
  id: SPEICHERBEDARF
  icon: mdi:memory
  state_class: measurement
  accuracy_decimals: 0
- platform: template
  name: PARTIAL_PRIORITY_DHW
  id: TEILVORRANG_WW
  state_class: measurement
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("TEILVORRANG_WW"));
    return {};
- platform: template
  name: TEMPORAL_VENTILATION_LEVEL_DURATION
  id: TEMPORALE_LUEFTUNGSSTUFE_DAUER
  icon: mdi:timer
  state_class: measurement
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("TEMPORALE_LUEFTUNGSSTUFE_DAUER"));
    return {};
- platform: template
  name: COMPRESSOR_MANAGER
  id: VERDICHTER_MANAGER
  icon: mdi:compress
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("VERDICHTER"));
    return {};
- platform: template
  name: ADJUSTED_ROOM_TARGET_TEMP
  id: VERSTELLTE_RAUMSOLLTEMP
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("VERSTELLTE_RAUMSOLLTEMP"));
    return {};
- platform: template
  name: HP_FLOW_ACTUAL_MANAGER
  id: WPVORLAUFIST_MANAGER
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("WPVORLAUFIST"));
    return {};
- platform: template
  name: INTERMEDIATE_INJECTION_ACTUAL_TEMP
  id: ZWISCHENEINSPRITZUNG_ISTTEMP
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("ZWISCHENEINSPRITZUNG_ISTTEMP"));
    return {};
- platform: template
  name: ACCESS_EEPROM
  id: ACCESS_EEPROM
  icon: mdi:memory
  accuracy_decimals: 0
- platform: template
  name: YEAR
  id: JAHR
  icon: mdi:calendar_month
  accuracy_decimals: 0
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("JAHR"));
    return {};
- platform: template
  name: MINUTE
  id: MINUTE
  icon: mdi:schedule
  accuracy_decimals: 0
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("MINUTE"));
    return {};
- platform: template
  name: MONTH
  id: MONAT
  icon: mdi:calendar_month
  accuracy_decimals: 0
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("MONAT"));
    return {};
- platform: template
  name: SECOND
  id: SEKUNDE
  icon: mdi:schedule
  accuracy_decimals: 0
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("SEKUNDE"));
    return {};
- platform: template
  name: HOUR
  id: STUNDE
  icon: mdi:schedule
  accuracy_decimals: 0
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("STUNDE"));
    return {};
- platform: template
  name: DAY
  id: TAG
  icon: mdi:calendar_month
  accuracy_decimals: 0
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("TAG"));
    return {};
- platform: template
  name: HP_STATUS
  id: WP_STATUS
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("WP_STATUS"));
    return {};
- platform: template
  name: UTILITY_LOCK_ACTIVE_MANAGER
  id: EVU_SPERRE_AKTIV_MANAGER
  icon: mdi:dip-switch
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EVU_SPERRE_AKTIV"));
    return {};
- platform: template
  name: EVAPORATOR_TEMP
  id: VERDAMPFERTEMP
  unit_of_measurement: °C
  icon: mdi:kettle-steam-outline
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("VERDAMPFERTEMP"));
    return {};
- platform: template
  name: RETURN_ACTUAL_TEMP
  id: RUECKLAUFISTTEMP
  unit_of_measurement: °C
  icon: mdi:waves-arrow-left
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("RUECKLAUFISTTEMP"));
    return {};
- platform: template
  name: COMPRESSOR_HEATING_MODULE
  id: VERDICHTER_HEIZMODUL
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("VERDICHTER"));
    return {};
- platform: template
  name: HP_FLOW_ACTUAL
  id: WPVORLAUFIST
  unit_of_measurement: °C
  icon: mdi:thermometer-lines
  device_class: temperature
  state_class: measurement
  accuracy_decimals: 1
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WPVORLAUFIST"));
    return {};
- platform: template
  name: DEFROSTING_ACTIVE
  id: ABTAUUNGAKTIV
  icon: mdi:description
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("AUSSENTEMP"));
    return {};
- platform: template
  name: OPERATING_MODE_HP
  id: BETRIEBSART_WP
  icon: mdi:dip-switch
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("BETRIEBSART_WP"));
    return {};
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_HEATING_TOTAL_KWH
  id: EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH"));
    return {};
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_HEATING_DAY_WH
  id: EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH
  unit_of_measurement: Wh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH"));
    return {};
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_DHW_TOTAL_KWH
  id: EL_AUFNAHMELEISTUNG_WW_SUM_KWH
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_WW_SUM_KWH"));
    return {};
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_DHW_DAY_WH
  id: EL_AUFNAHMELEISTUNG_WW_TAG_WH
  unit_of_measurement: Wh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_WW_TAG_WH"));
    return {};
- platform: template
  name: FATAL_ERROR
  id: FATAL_ERROR
  icon: mdi:alert-circle
  accuracy_decimals: 0
- platform: template
  name: ERROR_PARAMETER_SET_IWS
  id: FEHLER_PARAMETERSATZ_IWS
  icon: mdi:alert-circle
  accuracy_decimals: 0
- platform: template
  name: ERROR_MESSAGE
  id: FEHLERMELDUNG
  icon: mdi:alert-circle
  accuracy_decimals: 0
- platform: template
  name: HARDWARE_NUMBER_HEATING_MODULE
  id: HARDWARE_NUMMER_HEIZMODUL
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: INDEX_NOT_FOUND_HEATING_MODULE
  id: INDEX_NOT_FOUND_HEIZMODUL
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: INITIALIZATION_HEATING_MODULE
  id: INITIALISIERUNG_HEIZMODUL
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: K_OS_RMX_RESERVE_INFO3
  id: K_OS_RMX_RESERVE_INFO3
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: COMPRESSOR_RUNTIME_1_2_DHW_MODE_HEATING_MODULE
  id: LZ_VERD_1_2_WW_BETRIEB_HEIZMODUL
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_1_2_WW_BETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_1_DHW_MODE_HEATING_MODULE
  id: LZ_VERD_1_WW_BETRIEB_HEIZMODUL
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_1_WW_BETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_2_DHW_MODE_HEATING_MODULE
  id: LZ_VERD_2_WW_BETRIEB_HEIZMODUL
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_2_WW_BETRIEB"));
    return {};
- platform: template
  name: PARAMETER_SET_HEATING_MODULE
  id: PARAMETERSATZ_HEIZMODUL
  icon: mdi:alert-circle
  accuracy_decimals: 0
- platform: template
  name: SWITCHING_FUNCTION_IWS
  id: SCHALTFKT_IWS
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: SOFTWARE_NUMBER_HEATING_MODULE
  id: SOFTWARE_NUMMER_HEIZMODUL
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: SOLAR_COLLECTOR_3_I_SHARE
  id: SOLAR_KOLLEKTOR_3_I_ANTEIL
  icon: mdi:solar-power-variant
  accuracy_decimals: 0
- platform: template
  name: STORAGE_STATUS
  id: SPEICHER_STATUS
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: SUPPORT_POINT_HD1
  id: STUETZSTELLE_HD1
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: SUPPORT_POINT_HD2
  id: STUETZSTELLE_HD2
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: SUPPORT_POINT_ND1
  id: STUETZSTELLE_ND1
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: SUPPORT_POINT_ND2
  id: STUETZSTELLE_ND2
  icon: mdi:description
  accuracy_decimals: 0
- platform: template
  name: HEAT_GAIN_2WE_HEATING_TOTAL_KWH
  id: WAERMEERTRAG_2WE_HEIZ_SUM_KWH
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:heating-coil
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_2WE_HEIZ_SUM_KWH"));
    return {};
- platform: template
  name: HEAT_GAIN_2WE_DHW_TOTAL_KWH
  id: WAERMEERTRAG_2WE_WW_SUM_KWH
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:water-boiler
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_2WE_WW_SUM_KWH"));
    return {};
- platform: template
  name: HEAT_GAIN_HEATING_TOTAL_KWH
  id: WAERMEERTRAG_HEIZ_SUM_KWH
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:heating-coil
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_HEIZ_SUM_KWH"));
    return {};
- platform: template
  name: HEAT_GAIN_HEATING_DAY_WH
  id: WAERMEERTRAG_HEIZ_TAG_WH
  unit_of_measurement: Wh
  device_class: energy
  icon: mdi:heating-coil
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_HEIZ_TAG_WH"));
    return {};
- platform: template
  name: HEAT_GAIN_DHW_TOTAL_KWH
  id: WAERMEERTRAG_WW_SUM_KWH
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:water-boiler
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_WW_SUM_KWH"));
    return {};
- platform: template
  name: HEAT_GAIN_DHW_DAY_WH
  id: WAERMEERTRAG_WW_TAG_WH
  unit_of_measurement: Wh
  device_class: energy
  icon: mdi:water-boiler
  accuracy_decimals: 0
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_WW_TAG_WH"));
    return {};
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_HEATING_TOTAL_MWH
  id: EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH
  unit_of_measurement: MWh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH"));
    return {};
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_HEATING_DAY_KWH
  id: EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH"));
    return {};
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_DHW_TOTAL_MWH
  id: EL_AUFNAHMELEISTUNG_WW_SUM_MWH
  unit_of_measurement: MWh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_WW_SUM_MWH"));
    return {};
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_DHW_DAY_KWH
  id: EL_AUFNAHMELEISTUNG_WW_TAG_KWH
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("EL_AUFNAHMELEISTUNG_WW_TAG_KWH"));
    return {};
- platform: template
  name: HEAT_GAIN_2WE_HEATING_TOTAL_MWH
  id: WAERMEERTRAG_2WE_HEIZ_SUM_MWH
  unit_of_measurement: MWh
  device_class: energy
  icon: mdi:heating-coil
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_2WE_HEIZ_SUM_MWH"));
    return {};
- platform: template
  name: HEAT_GAIN_2WE_DHW_TOTAL_MWH
  id: WAERMEERTRAG_2WE_WW_SUM_MWH
  unit_of_measurement: MWh
  device_class: energy
  icon: mdi:water-boiler
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_2WE_WW_SUM_MWH"));
    return {};
- platform: template
  name: HEAT_GAIN_HEATING_TOTAL_MWH
  id: WAERMEERTRAG_HEIZ_SUM_MWH
  unit_of_measurement: MWh
  device_class: energy
  icon: mdi:heating-coil
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_HEIZ_SUM_MWH"));
    return {};
- platform: template
  name: HEAT_GAIN_HEATING_DAY_KWH
  id: WAERMEERTRAG_HEIZ_TAG_KWH
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:heating-coil
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_HEIZ_TAG_KWH"));
    return {};
- platform: template
  name: HEAT_GAIN_DHW_TOTAL_MWH
  id: WAERMEERTRAG_WW_SUM_MWH
  unit_of_measurement: MWh
  device_class: energy
  icon: mdi:water-boiler
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_WW_SUM_MWH"));
    return {};
- platform: template
  name: HEAT_GAIN_DHW_DAY_KWH
  id: WAERMEERTRAG_WW_TAG_KWH
  unit_of_measurement: KWh
  device_class: energy
  icon: mdi:water-boiler
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("WAERMEERTRAG_WW_TAG_KWH"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_1_2_HEATING_MODE_HEATING_MODULE
  id: LZ_VERD_1_2_HEIZBETRIEB_HEIZMODUL
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_1_2_HEIZBETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_1_2_COOLING_MODE_HEATING_MODULE
  id: LZ_VERD_1_2_KUEHLBETRIEB_HEIZMODUL
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_1_2_KUEHLBETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_1_HEATING_MODE_HEATING_MODULE
  id: LZ_VERD_1_HEIZBETRIEB_HEIZMODUL
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_1_HEIZBETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_1_COOLING_MODE_HEATING_MODULE
  id: LZ_VERD_1_KUEHLBETRIEB_HEIZMODUL
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_1_KUEHLBETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_2_HEATING_MODE_HEATING_MODULE
  id: LZ_VERD_2_HEIZBETRIEB_HEIZMODUL
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_2_HEIZBETRIEB"));
    return {};
- platform: template
  name: COMPRESSOR_RUNTIME_2_COOLING_MODE_HEATING_MODULE
  id: LZ_VERD_2_KUEHLBETRIEB_HEIZMODUL
  icon: mdi:timer
  device_class: duration
  state_class: measurement
  accuracy_decimals: 3
  update_interval: 10min
  lambda: |-
    readSignal(&CanMembers[cm_heizmodul], GetElsterIndex("LZ_VERD_2_KUEHLBETRIEB"));
    return {};
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_HEATING_TOTAL
  id: EL_AUFNAHMELEISTUNG_HEIZ_SUM
  unit_of_measurement: MWh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 3
  state_class: total_increasing
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_DHW_TOTAL
  id: EL_AUFNAHMELEISTUNG_WW_SUM
  unit_of_measurement: MWh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 3
  state_class: total_increasing
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_HEATING_INCREASING
  id: EL_AUFNAHMELEISTUNG_HEIZ_INCREASING
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 3
  state_class: total_increasing
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_DHW_INCREASING
  id: EL_AUFNAHMELEISTUNG_WW_INCREASING
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 3
  state_class: total_increasing
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_HEATING_DAY
  id: EL_AUFNAHMELEISTUNG_HEIZ_TAG
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 3
- platform: template
  name: ELECTRIC_POWER_CONSUMPTION_DHW_DAY
  id: EL_AUFNAHMELEISTUNG_WW_TAG
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:transmission-tower
  accuracy_decimals: 3
- platform: template
  name: HEAT_GAIN_2WE_HEATING_TOTAL
  id: WAERMEERTRAG_2WE_HEIZ_SUM
  unit_of_measurement: MWh
  device_class: energy
  icon: mdi:heating-coil
  accuracy_decimals: 3
  state_class: total_increasing
- platform: template
  name: HEAT_GAIN_2WE_DHW_TOTAL
  id: WAERMEERTRAG_2WE_WW_SUM
  unit_of_measurement: MWh
  device_class: energy
  icon: mdi:water-boiler
  accuracy_decimals: 3
  state_class: total_increasing
- platform: template
  name: HEAT_GAIN_HEATING_TOTAL
  id: WAERMEERTRAG_HEIZ_SUM
  unit_of_measurement: MWh
  device_class: energy
  icon: mdi:heating-coil
  accuracy_decimals: 3
  state_class: total_increasing
- platform: template
  name: HEAT_GAIN_HEATING_INCREASING
  id: WAERMEERTRAG_HEIZ_INCREASING
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:heating-coil
  accuracy_decimals: 3
  state_class: total_increasing
- platform: template
  name: HEAT_GAIN_HEATING_DAY
  id: WAERMEERTRAG_HEIZ_TAG
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:heating-coil
  accuracy_decimals: 3
- platform: template
  name: HEAT_GAIN_DHW_TOTAL
  id: WAERMEERTRAG_WW_SUM
  unit_of_measurement: MWh
  device_class: energy
  icon: mdi:water-boiler
  accuracy_decimals: 3
  state_class: total_increasing
- platform: template
  name: HEAT_GAIN_DHW_INCREASING
  id: WAERMEERTRAG_WW_INCREASING
  unit_of_measurement: kWh
  device_class: energy
  icon: mdi:heating-coil
  accuracy_decimals: 3
  state_class: total_increasing
- platform: template
  name: HEAT_GAIN_DHW_DAY
  id: WAERMEERTRAG_WW_TAG
  unit_of_measurement: KWh
  device_class: energy
  icon: mdi:water-boiler
  accuracy_decimals: 3
- platform: template
  name: COP_DHW
  id: COP_WW
  icon: mdi:chart-bell-curve-cumulative
  device_class: power_factor
  state_class: measurement
  accuracy_decimals: 2
- platform: template
  name: COP_HEATING
  id: COP_HEIZ
  icon: mdi:chart-bell-curve-cumulative
  device_class: power_factor
  state_class: measurement
  accuracy_decimals: 2
- platform: template
  name: COP_TOTAL
  id: COP_GESAMT
  icon: mdi:chart-bell-curve-cumulative
  device_class: power_factor
  state_class: measurement
  accuracy_decimals: 2
- platform: wifi_signal
  name: WiFi Signal dBm
  icon: mdi:wifi
  update_interval: 60s
  id: wifi_dbm
- platform: template
  name: WiFi Signal
  icon: mdi:signal
  unit_of_measurement: '%'
  update_interval: 60s
  id: wifi_percentage
  lambda: |-
    float dBm = id(wifi_dbm).state;
    float MIN_DBM = -100.0; // Minimum RSSI in dBm
    float MAX_DBM = -30.0; // Maximum RSSI in dBm
    if (dBm < MIN_DBM) dBm = MIN_DBM;
    if (dBm > MAX_DBM) dBm = MAX_DBM;
    return ((dBm - MIN_DBM) / (MAX_DBM - MIN_DBM)) * 100;
text_sensor:
- platform: homeassistant
  name: Heat Pump Date Setpoint
  id: warmepumpe_datum
  entity_id: input_datetime.warmepumpe_datum
- platform: homeassistant
  name: Heat Pump Time Setpoint
  id: warmepumpe_uhrzeit
  entity_id: input_datetime.warmepumpe_uhrzeit
- platform: homeassistant
  name: ADJUST_STORAGE_TARGET_TEMP_SET
  id: EINSTELL_SPEICHERSOLLTEMP_SET
  entity_id: input_number.speichersolltemp_set
  on_value:
    then:
      lambda: |-
        if(atoi(x.c_str()) != 20) {
          char temp[3];
          strncpy(temp, x.c_str(), sizeof(temp)-1);
          temp[2] ='\0';
          const char* ctemp = temp;
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("EINSTELL_SPEICHERSOLLTEMP"), ctemp);
          id(EINSTELL_SPEICHERSOLLTEMP).update();
          id(SPEICHERISTTEMP).update();
          id(SPEICHERSOLLTEMP).update();

        }
        return;
- platform: homeassistant
  name: ADJUST_STORAGE_TARGET_TEMP2_SET
  id: EINSTELL_SPEICHERSOLLTEMP2_SET
  entity_id: input_number.speichersolltemp2_set
  on_value:
    then:
      lambda: |-
        if(atoi(x.c_str()) != 20) {
          char temp[3];
          strncpy(temp, x.c_str(), sizeof(temp)-1);
          temp[2] ='\0';
          const char* ctemp = temp;
          writeSignal(&CanMembers[cm_manager], GetElsterIndex("EINSTELL_SPEICHERSOLLTEMP2"), ctemp);
          id(EINSTELL_SPEICHERSOLLTEMP2).update();
          id(SPEICHERISTTEMP).update();
          id(SPEICHERSOLLTEMP).update();
        }
        return;
- platform: template
  name: DEVICE_ID_MANAGER
  id: GERAETE_ID_MANAGER
  icon: mdi:description
- platform: template
  name: PROGRAM_SWITCH
  id: PROGRAMMSCHALTER
  icon: mdi:switch
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("PROGRAMMSCHALTER"));
    return {};
- platform: template
  name: SUMMER_OPERATION
  id: SOMMERBETRIEB
  icon: mdi:weather-sunny
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("SOMMERBETRIEB"));
    return {};
- platform: template
  name: DHW_ECO
  id: WW_ECO
  icon: mdi:leaf-circle-outline
  lambda: |-
    readSignal(&CanMembers[cm_manager], GetElsterIndex("WW_ECO"));
    return {};
- platform: template
  name: DEVICE_ID_HEATING_MODULE
  id: GERAETE_ID_HEIZMODUL
  icon: mdi:description
- platform: template
  name: DATE
  id: DATUM
  icon: mdi:calendar
- platform: template
  name: TIME
  id: ZEIT
  icon: mdi:clock
button:
- platform: template
  name: Update Time
  id: update_uhrzeit
  on_press:
    then:
      lambda: |-
        ESP_LOGI("WRITE UHRZEIT VIA BUTTON", "%s", id(warmepumpe_datum).state.c_str());

        char stunde[3];
        char minute[3];
        char sekunde[3];

        strncpy(stunde, id(warmepumpe_uhrzeit).state.c_str(), sizeof(stunde)-1);
        stunde[2] ='\0';
        strncpy(minute, id(warmepumpe_uhrzeit).state.c_str()+3, sizeof(minute)-1);
        minute[2] ='\0';
        strncpy(sekunde, id(warmepumpe_uhrzeit).state.c_str()+6, sizeof(sekunde)-1);
        sekunde[2] ='\0';
        const char* cstunde = stunde;
        const char* cminute = minute;
        const char* csekunde = sekunde;
        ESP_LOGI("WRITE", "Stunde: %s, Minute: %s, Sekunde: %s", cstunde, cminute, csekunde);
        writeSignal(&CanMembers[cm_manager], GetElsterIndex("STUNDE"), cstunde);
        id(STUNDE).update();
        writeSignal(&CanMembers[cm_manager], GetElsterIndex("MINUTE"), cminute);
        id(MINUTE).update();
        writeSignal(&CanMembers[cm_manager], GetElsterIndex("SEKUNDE"), csekunde);
        id(SEKUNDE).update();
- platform: template
  name: Update Date
  id: update_datum
  on_press:
    then:
      lambda: |-
        ESP_LOGI("WRITE DATUM VIA BUTTON", "%s", id(warmepumpe_datum).state.c_str());
        char year[3];
        char month[3];
        char day[3];

        strncpy(year, id(warmepumpe_datum).state.c_str()+2, sizeof(year)-1);
        year[2] ='\0';
        strncpy(month, id(warmepumpe_datum).state.c_str()+5, sizeof(month)-1);
        month[2] ='\0';
        strncpy(day, id(warmepumpe_datum).state.c_str()+8, sizeof(day)-1);
        day[2] ='\0';

        const char* cyear = year;
        const char* cmonth = month;
        const char* cday = day;
        ESP_LOGI("WRITE", "Year: %s, Month: %s, Day: %s", cyear, cmonth, cday);
        writeSignal(&CanMembers[cm_manager], GetElsterIndex("JAHR"), cyear);
        id(JAHR).update();
        writeSignal(&CanMembers[cm_manager], GetElsterIndex("MONAT"), cmonth);
        id(MONAT).update();
        writeSignal(&CanMembers[cm_manager], GetElsterIndex("TAG"), cday);
        id(TAG).update();
spi:
  id: McpSpi
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19
canbus:
- platform: mcp2515
  id: my_mcp2515
  spi_id: McpSpi
  cs_pin: GPIO5
  can_id: 700
  use_extended_id: false
  bit_rate: 20kbps
  on_frame:
  - can_id: 384
    then:
    - lambda: "unsigned short canId = 180;\nstd::string value;\nconst ElsterIndex* ei = processCanMessage(canId, value, x);\n\nif(ei->Name == \"AUSSENTEMP\") {\n  id(AUSSENTEMP).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"BUSKONTROLLE\") {\n  id(BUSKONTROLLE).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"EINSTELL_SPEICHERSOLLTEMP\") {\n  id(EINSTELL_SPEICHERSOLLTEMP).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"EINSTELL_SPEICHERSOLLTEMP2\") {\n  id(EINSTELL_SPEICHERSOLLTEMP2).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"HILFSKESSELSOLL\") {\n  id(HILFSKESSELSOLL).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"INITIALISIERUNG\") {\n  id(INITIALISIERUNG_KESSEL).publish_state(std::stoi(value));\n  return;\n}          \nif(ei->Name == \"KESSELSOLLTEMP\") {\n  id(KESSELSOLLTEMP).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"RUECKLAUFISTTEMP\") {\n  id(RUECKLAUFISTTEMP_KESSEL).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"SPEICHERISTTEMP\") {\n  id(SPEICHERISTTEMP).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"SPEICHERSOLLTEMP\") {\n  id(SPEICHERSOLLTEMP).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"VORLAUFSOLLTEMP\") {\n  id(VORLAUFSOLLTEMP).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"WPVORLAUFIST\") {\n  id(WPVORLAUFIST_KESSEL).publish_state(std::stof(value));\n  return;\n}            "
  - can_id: 1152
    then:
    - lambda: "unsigned short canId = 480;\nstd::string value;\nconst ElsterIndex* ei = processCanMessage(canId, value, x);\n\nif(ei->Name == \"ACCESS_EEPROM\") {\n  id(ACCESS_EEPROM).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"ANFAHRENT\") {\n  id(ANFAHRENT).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"GERAETEKONFIGURATION\") {\n  id(GERAETEKONFIGURATION).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"GERAETE_ID\") {\n  id(GERAETE_ID_MANAGER).publish_state(value);\n  return;\n}\nif(ei->Name == \"HARDWARE_NUMMER\") {\n  id(HARDWARE_NUMMER_MANAGER).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"INDEX_NOT_FOUND\") {\n  id(INDEX_NOT_FOUND_MANAGER).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"INITIALISIERUNG\") {\n  id(INITIALISIERUNG_MANAGER).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"JAHR\") {\n  id(JAHR).publish_state(std::stoi(value));\n  publishDate();\n  return; \n}\nif(ei->Name == \"LAUFZEIT_VERD_BEI_SPEICHERBEDARF\") {\n  id(LAUFZEIT_VERD_BEI_SPEICHERBEDARF).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"LUEFT_PASSIVKUEHLUNG_UEBER_FORTLUEFTER\") {\n  id(LUEFT_PASSIVKUEHLUNG_UEBER_FORTLUEFTER).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_1_2_HEIZBETRIEB\") {\n  id(LZ_VERD_1_2_HEIZBETRIEB_MANAGER).publish_state(std::stod(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_1_2_KUEHLBETRIEB\") {\n  id(LZ_VERD_1_2_KUEHLBETRIEB_MANAGER).publish_state(std::stod(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_1_2_WW_BETRIEB\") {\n  id(LZ_VERD_1_2_WW_BETRIEB_MANAGER).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_1_HEIZBETRIEB\") {\n  id(LZ_VERD_1_HEIZBETRIEB_MANAGER).publish_state(std::stod(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_1_KUEHLBETRIEB\") {\n  id(LZ_VERD_1_KUEHLBETRIEB_MANAGER).publish_state(std::stod(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_1_WW_BETRIEB\") {\n  id(LZ_VERD_1_WW_BETRIEB_MANAGER).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_2_HEIZBETRIEB\") {\n  id(LZ_VERD_2_HEIZBETRIEB_MANAGER).publish_state(std::stod(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_2_KUEHLBETRIEB\") {\n  id(LZ_VERD_2_KUEHLBETRIEB_MANAGER).publish_state(std::stod(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_2_WW_BETRIEB\") {\n  id(LZ_VERD_2_WW_BETRIEB_MANAGER).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"MINUTE\") {\n  id(MINUTE).publish_state(std::stoi(value));\n  publishTime();\n  return;\n}\nif(ei->Name == \"MONAT\") {\n  id(MONAT).publish_state(std::stoi(value));\n  publishDate();\n  return;\n}\nif(ei->Name == \"PARAMETERSATZ\") {\n  id(PARAMETERSATZ_MANAGER).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"PROGRAMMSCHALTER\") {\n  id(PROGRAMMSCHALTER).publish_state(value);\n  return;\n}\nif(ei->Name == \"QUELLENPUMPEN_STATUS\") {\n  id(QUELLENPUMPEN_STATUS).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"RAUMISTTEMP\") {\n  id(RAUMISTTEMP).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"RAUMSOLLTEMP_I\") {\n  id(RAUMSOLLTEMP_I).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"RAUMSOLLTEMP_II\") {\n  id(RAUMSOLLTEMP_II).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"RAUMSOLLTEMP_III\") {\n  id(RAUMSOLLTEMP_III).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"RAUMSOLLTEMP_NACHT\") {\n  id(RAUMSOLLTEMP_NACHT).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"RUECKLAUFISTTEMP\") {\n  id(RUECKLAUFISTTEMP_MANAGER).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"SAMMEL_RELAISSTATUS\") {\n  id(SAMMEL_RELAISSTATUS).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"SEKUNDE\") {\n  id(SEKUNDE).publish_state(std::stoi(value));\n  publishTime();\n  return;\n}\nif(ei->Name == \"SOFTWARE_NUMMER\") {\n  id(SOFTWARE_NUMMER_MANAGER).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"SOFTWARE_VERSION\") {\n  id(SOFTWARE_VERSION).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"SOMMERBETRIEB\") {\n  id(SOMMERBETRIEB).publish_state(value);\n  return;\n}\nif(ei->Name == \"SPEICHERBEDARF\") {\n  id(SPEICHERBEDARF).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"STUNDE\") {\n  id(STUNDE).publish_state(std::stoi(value));\n  publishTime();\n  return;\n}\nif(ei->Name == \"TAG\") {\n  id(TAG).publish_state(std::stoi(value));\n  publishDate();\n  return;\n}\nif(ei->Name == \"TEILVORRANG_WW\") {\n  id(TEILVORRANG_WW).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"TEMPORALE_LUEFTUNGSSTUFE_DAUER\") {\n  id(TEMPORALE_LUEFTUNGSSTUFE_DAUER).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"VERDICHTER\") {\n  id(VERDICHTER_MANAGER).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"VERSTELLTE_RAUMSOLLTEMP\") {\n  id(VERSTELLTE_RAUMSOLLTEMP).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"WP_STATUS\") {\n  id(WP_STATUS).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"WPVORLAUFIST\") {\n  id(WPVORLAUFIST_MANAGER).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"WW_ECO\") {\n  id(WW_ECO).publish_state(value);\n  return;\n}\nif(ei->Name == \"ZWISCHENEINSPRITZUNG_ISTTEMP\") {\n  id(ZWISCHENEINSPRITZUNG_ISTTEMP).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"EVU_SPERRE_AKTIV\") {\n  id(EVU_SPERRE_AKTIV_MANAGER).publish_state(std::stoi(value));\n  return;\n}"
  - can_id: 1280
    then:
    - lambda: "unsigned short canId = 500;\nstd::string value;\nconst ElsterIndex* ei = processCanMessage(canId, value, x);\n\nif(ei->Name == \"VERDAMPFERTEMP\") {\n  id(VERDAMPFERTEMP).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"INITIALISIERUNG\") {\n  id(INITIALISIERUNG_HEIZMODUL).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"SPEICHER_STATUS\") {\n  id(SPEICHER_STATUS).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"RUECKLAUFISTTEMP\") {\n  id(RUECKLAUFISTTEMP).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"VERDICHTER\") {\n  id(VERDICHTER_HEIZMODUL).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"WPVORLAUFIST\") {\n  id(WPVORLAUFIST).publish_state(std::stof(value));\n  return;\n}\nif(ei->Name == \"ABTAUUNGAKTIV\") {\n  id(ABTAUUNGAKTIV).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"BETRIEBSART_WP\") {\n  id(ABTAUUNGAKTIV).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH\") {\n  id(EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH).publish_state(std::stoi(value));\n  id(EL_AUFNAHMELEISTUNG_HEIZ_SUM).publish_state(id(EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH).state + id(EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH).state / 1000 );\n  update_COP_HEIZ();\n  update_COP_GESAMT();\n  return;\n}\nif(ei->Name == \"EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH\") {\n  id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH).publish_state(std::stoi(value));\n  id(EL_AUFNAHMELEISTUNG_HEIZ_TAG).publish_state(id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH).state + id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH).state / 1000);\n  id(EL_AUFNAHMELEISTUNG_HEIZ_INCREASING).publish_state(id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH).state + id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH).state / 1000);\n  return;\n}\nif(ei->Name == \"EL_AUFNAHMELEISTUNG_WW_SUM_KWH\") {\n  id(EL_AUFNAHMELEISTUNG_WW_SUM_KWH).publish_state(std::stoi(value));\n  id(EL_AUFNAHMELEISTUNG_WW_SUM).publish_state(id(EL_AUFNAHMELEISTUNG_WW_SUM_MWH).state + id(EL_AUFNAHMELEISTUNG_WW_SUM_KWH).state / 1000);\n  update_COP_WW();\n  update_COP_GESAMT();\n  return;\n}\nif(ei->Name == \"EL_AUFNAHMELEISTUNG_WW_TAG_WH\") {\n  id(EL_AUFNAHMELEISTUNG_WW_TAG_WH).publish_state(std::stoi(value));\n  id(EL_AUFNAHMELEISTUNG_WW_TAG).publish_state(id(EL_AUFNAHMELEISTUNG_WW_TAG_KWH).state + id(EL_AUFNAHMELEISTUNG_WW_TAG_WH).state / 1000);\n  id(EL_AUFNAHMELEISTUNG_WW_INCREASING).publish_state(id(EL_AUFNAHMELEISTUNG_WW_TAG_KWH).state + id(EL_AUFNAHMELEISTUNG_WW_TAG_WH).state / 1000);\n\n  return;\n}\nif(ei->Name == \"FATAL_ERROR\") {\n  id(FATAL_ERROR).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"FEHLER_PARAMETERSATZ_IWS\") {\n  id(FEHLER_PARAMETERSATZ_IWS).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"FEHLERMELDUNG\") {\n  id(FEHLERMELDUNG).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"HARDWARE_NUMMER\") {\n  id(HARDWARE_NUMMER_HEIZMODUL).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"INDEX_NOT_FOUND\") {\n  id(INDEX_NOT_FOUND_HEIZMODUL).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"K_OS_RMX_RESERVE_INFO3\") {\n  id(K_OS_RMX_RESERVE_INFO3).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_1_2_WW_BETRIEB\") {\n  id(LZ_VERD_1_2_WW_BETRIEB_HEIZMODUL).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_1_WW_BETRIEB\") {\n  id(LZ_VERD_1_WW_BETRIEB_HEIZMODUL).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_2_WW_BETRIEB\") {\n  id(LZ_VERD_2_WW_BETRIEB_HEIZMODUL).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"PARAMETERSATZ\") {\n  id(PARAMETERSATZ_HEIZMODUL).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"SCHALTFKT_IWS\") {\n  id(SCHALTFKT_IWS).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"SOFTWARE_NUMMER\") {\n  id(SOFTWARE_NUMMER_HEIZMODUL).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"SOLAR_KOLLEKTOR_3_I_ANTEIL\") {\n  id(SOLAR_KOLLEKTOR_3_I_ANTEIL).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"STUETZSTELLE_HD1\") {\n  id(STUETZSTELLE_HD1).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"STUETZSTELLE_HD2\") {\n  id(STUETZSTELLE_HD2).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"STUETZSTELLE_ND1\") {\n  id(STUETZSTELLE_ND1).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"STUETZSTELLE_ND2\") {\n  id(STUETZSTELLE_ND2).publish_state(std::stoi(value));\n  return;\n}\nif(ei->Name == \"WAERMEERTRAG_2WE_HEIZ_SUM_KWH\") {\n  id(WAERMEERTRAG_2WE_HEIZ_SUM_KWH).publish_state(std::stoi(value));\n  id(WAERMEERTRAG_2WE_HEIZ_SUM).publish_state(id(WAERMEERTRAG_2WE_HEIZ_SUM_MWH).state+id(WAERMEERTRAG_2WE_HEIZ_SUM_KWH).state/1000);           \n  return;\n}\nif(ei->Name == \"WAERMEERTRAG_2WE_WW_SUM_KWH\") {\n  id(WAERMEERTRAG_2WE_WW_SUM_KWH).publish_state(std::stoi(value));\n  id(WAERMEERTRAG_2WE_WW_SUM).publish_state(id(WAERMEERTRAG_2WE_WW_SUM_MWH).state+id(WAERMEERTRAG_2WE_WW_SUM_KWH).state/1000);           \n  return;\n}\nif(ei->Name == \"WAERMEERTRAG_HEIZ_SUM_KWH\") {\n  id(WAERMEERTRAG_HEIZ_SUM_KWH).publish_state(std::stoi(value));\n  id(WAERMEERTRAG_HEIZ_SUM).publish_state(id(WAERMEERTRAG_HEIZ_SUM_MWH).state+id(WAERMEERTRAG_HEIZ_SUM_KWH).state/1000);\n  update_COP_HEIZ();\n  update_COP_GESAMT();\n  return;\n}\nif(ei->Name == \"WAERMEERTRAG_HEIZ_TAG_WH\") {\n  id(WAERMEERTRAG_HEIZ_TAG_WH).publish_state(std::stoi(value));\n  id(WAERMEERTRAG_HEIZ_TAG).publish_state(id(WAERMEERTRAG_HEIZ_TAG_KWH).state+id(WAERMEERTRAG_HEIZ_TAG_WH).state/1000);      \n  id(WAERMEERTRAG_HEIZ_INCREASING).publish_state(id(WAERMEERTRAG_HEIZ_TAG_KWH).state+id(WAERMEERTRAG_HEIZ_TAG_WH).state/1000);           \n\n  return;\n}\nif(ei->Name == \"WAERMEERTRAG_WW_SUM_KWH\") {\n  id(WAERMEERTRAG_WW_SUM_KWH).publish_state(std::stoi(value));\n  id(WAERMEERTRAG_WW_SUM).publish_state(id(WAERMEERTRAG_WW_SUM_MWH).state+id(WAERMEERTRAG_WW_SUM_KWH).state/1000);\n  update_COP_WW();\n  update_COP_GESAMT();\n  return;\n}\nif(ei->Name == \"WAERMEERTRAG_WW_TAG_WH\") {\n  id(WAERMEERTRAG_WW_TAG_WH).publish_state(std::stoi(value));\n  id(WAERMEERTRAG_WW_TAG).publish_state(id(WAERMEERTRAG_WW_TAG_KWH).state+id(WAERMEERTRAG_WW_TAG_WH).state/1000);\n  id(WAERMEERTRAG_WW_INCREASING).publish_state(id(WAERMEERTRAG_WW_TAG_KWH).state+id(WAERMEERTRAG_WW_TAG_WH).state/1000);           \n\n  return;\n}\nif(ei->Name == \"EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH\") {\n  id(EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH).publish_state(std::stod(value));\n  id(EL_AUFNAHMELEISTUNG_HEIZ_SUM).publish_state(id(EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH).state+id(EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH).state/1000);\n  update_COP_HEIZ();\n  update_COP_GESAMT();\n  return;\n}\nif(ei->Name == \"EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH\") {\n  id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH).publish_state(std::stod(value));\n  id(EL_AUFNAHMELEISTUNG_HEIZ_TAG).publish_state(id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH).state+id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH).state/1000);      \n  id(EL_AUFNAHMELEISTUNG_HEIZ_INCREASING).publish_state(id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH).state + id(EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH).state / 1000);\n  return;\n}\nif(ei->Name == \"EL_AUFNAHMELEISTUNG_WW_SUM_MWH\") {\n  id(EL_AUFNAHMELEISTUNG_WW_SUM_MWH).publish_state(std::stod(value));\n  id(EL_AUFNAHMELEISTUNG_WW_SUM).publish_state(id(EL_AUFNAHMELEISTUNG_WW_SUM_MWH).state+id(EL_AUFNAHMELEISTUNG_WW_SUM_KWH).state/1000);\n  update_COP_WW();\n  update_COP_GESAMT();\n  return;\n}\nif(ei->Name == \"EL_AUFNAHMELEISTUNG_WW_TAG_KWH\") {\n  id(EL_AUFNAHMELEISTUNG_WW_TAG_KWH).publish_state(std::stod(value));\n  id(EL_AUFNAHMELEISTUNG_WW_TAG).publish_state(id(EL_AUFNAHMELEISTUNG_WW_TAG_KWH).state+id(EL_AUFNAHMELEISTUNG_WW_TAG_WH).state/1000);      \n  id(EL_AUFNAHMELEISTUNG_WW_INCREASING).publish_state(id(EL_AUFNAHMELEISTUNG_WW_TAG_KWH).state + id(EL_AUFNAHMELEISTUNG_WW_TAG_WH).state / 1000);\n  return;\n}\nif(ei->Name == \"WAERMEERTRAG_2WE_HEIZ_SUM_MWH\") {\n  id(WAERMEERTRAG_2WE_HEIZ_SUM_MWH).publish_state(std::stod(value));\n  id(WAERMEERTRAG_2WE_HEIZ_SUM).publish_state(id(WAERMEERTRAG_2WE_HEIZ_SUM_MWH).state+id(WAERMEERTRAG_2WE_HEIZ_SUM_KWH).state/1000);           \n  return;\n}\nif(ei->Name == \"WAERMEERTRAG_2WE_WW_SUM_MWH\") {\n  id(WAERMEERTRAG_2WE_WW_SUM_MWH).publish_state(std::stod(value));\n  id(WAERMEERTRAG_2WE_WW_SUM).publish_state(id(WAERMEERTRAG_2WE_WW_SUM_MWH).state+id(WAERMEERTRAG_2WE_WW_SUM_KWH).state/1000);           \n  return;\n}\nif(ei->Name == \"WAERMEERTRAG_HEIZ_SUM_MWH\") {\n  id(WAERMEERTRAG_HEIZ_SUM_MWH).publish_state(std::stod(value));\n  id(WAERMEERTRAG_HEIZ_SUM).publish_state(id(WAERMEERTRAG_HEIZ_SUM_MWH).state+id(WAERMEERTRAG_HEIZ_SUM_KWH).state/1000);\n  update_COP_HEIZ();\n  update_COP_GESAMT();\n  return;\n}\nif(ei->Name == \"WAERMEERTRAG_HEIZ_TAG_KWH\") {\n  id(WAERMEERTRAG_HEIZ_TAG_KWH).publish_state(std::stod(value));\n  id(WAERMEERTRAG_HEIZ_TAG).publish_state(id(WAERMEERTRAG_HEIZ_TAG_KWH).state+id(WAERMEERTRAG_HEIZ_TAG_WH).state/1000);\n  id(WAERMEERTRAG_HEIZ_INCREASING).publish_state(id(WAERMEERTRAG_HEIZ_TAG_KWH).state+id(WAERMEERTRAG_HEIZ_TAG_WH).state/1000);           \n\n  return;\n}\nif(ei->Name == \"WAERMEERTRAG_WW_SUM_MWH\") {\n  id(WAERMEERTRAG_WW_SUM_MWH).publish_state(std::stod(value));\n  id(WAERMEERTRAG_WW_SUM).publish_state(id(WAERMEERTRAG_WW_SUM_MWH).state+id(WAERMEERTRAG_WW_SUM_KWH).state/1000);           \n  return;\n}\nif(ei->Name == \"WAERMEERTRAG_WW_TAG_KWH\") {\n  id(WAERMEERTRAG_WW_TAG_KWH).publish_state(std::stod(value));\n  id(WAERMEERTRAG_WW_TAG).publish_state(id(WAERMEERTRAG_WW_TAG_KWH).state+id(WAERMEERTRAG_WW_TAG_WH).state/1000);           \n  id(WAERMEERTRAG_WW_INCREASING).publish_state(id(WAERMEERTRAG_WW_TAG_KWH).state+id(WAERMEERTRAG_WW_TAG_WH).state/1000);           \n\n  return;\n}\nif(ei->Name == \"LZ_VERD_1_2_HEIZBETRIEB\") {\n  id(LZ_VERD_1_2_HEIZBETRIEB_HEIZMODUL).publish_state(std::stod(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_1_2_KUEHLBETRIEB\") {\n  id(LZ_VERD_1_2_KUEHLBETRIEB_HEIZMODUL).publish_state(std::stod(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_1_HEIZBETRIEB\") {\n  id(LZ_VERD_1_HEIZBETRIEB_HEIZMODUL).publish_state(std::stod(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_1_KUEHLBETRIEB\") {\n  id(LZ_VERD_1_KUEHLBETRIEB_HEIZMODUL).publish_state(std::stod(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_2_HEIZBETRIEB\") {\n  id(LZ_VERD_2_HEIZBETRIEB_HEIZMODUL).publish_state(std::stod(value));\n  return;\n}\nif(ei->Name == \"LZ_VERD_2_KUEHLBETRIEB\") {\n  id(LZ_VERD_2_KUEHLBETRIEB_HEIZMODUL).publish_state(std::stod(value));\n  return;\n}\nif(ei->Name == \"GERAETE_ID\") {\n  id(GERAETE_ID_HEIZMODUL).publish_state(value);\n  return;\n}"
  - can_id: 0
    then:
    - lambda: |-
        unsigned short canId = 000;
        std::string value;
        const ElsterIndex* ei = processCanMessage(canId, value, x);
  - can_id: 256
    then:
    - lambda: |-
        unsigned short canId = 100;
        std::string value;
        const ElsterIndex* ei = processCanMessage(canId, value, x);
  - can_id: 769
    then:
    - lambda: |-
        unsigned short canId = 301;
        std::string value;
        const ElsterIndex* ei = processCanMessage(canId, value, x);
  - can_id: 770
    then:
    - lambda: |-
        unsigned short canId = 302;
        std::string value;
        const ElsterIndex* ei = processCanMessage(canId, value, x);
  - can_id: 1289
    then:
    - lambda: |-
        unsigned short canId = 509;
        std::string value;
        const ElsterIndex* ei = processCanMessage(canId, value, x);
  - can_id: 1300
    then:
    - lambda: |-
        unsigned short canId = 514;
        std::string value;
        const ElsterIndex* ei = processCanMessage(canId, value, x);
  - can_id: 1537
    then:
    - lambda: |-
        unsigned short canId = 601;
        std::string value;
        const ElsterIndex* ei = processCanMessage(canId, value, x);
  - can_id: 1538
    then:
    - lambda: |-
        unsigned short canId = 602;
        std::string value;
        const ElsterIndex* ei = processCanMessage(canId, value, x);
  - can_id: 1539
    then:
    - lambda: |-
        unsigned short canId = 603;
        std::string value;
        const ElsterIndex* ei = processCanMessage(canId, value, x);
  - can_id: 1664
    then:
    - lambda: |-
        unsigned short canId = 680;
        std::string value;
        const ElsterIndex* ei = processCanMessage(canId, value, x);
  - can_id: 1792
    then:
    - lambda: |-
        unsigned short canId = 700;
        std::string value;
        const ElsterIndex* ei = processCanMessage(canId, value, x);
